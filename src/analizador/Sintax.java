
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 04 22:11:02 CST 2023
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 04 22:11:02 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\015\011\000" +
    "\002\015\007\000\002\015\011\000\002\015\011\000\002" +
    "\015\011\000\002\015\011\000\002\015\013\000\002\004" +
    "\007\000\002\004\011\000\002\004\011\000\002\004\010" +
    "\000\002\004\012\000\002\004\012\000\002\004\013\000" +
    "\002\004\013\000\002\004\012\000\002\004\010\000\002" +
    "\004\012\000\002\004\012\000\002\004\011\000\002\004" +
    "\013\000\002\004\013\000\002\004\014\000\002\004\014" +
    "\000\002\004\013\000\002\004\006\000\002\004\007\000" +
    "\002\004\007\000\002\004\010\000\002\004\006\000\002" +
    "\004\010\000\002\006\007\000\002\013\003\000\002\013" +
    "\010\000\002\013\010\000\002\013\010\000\002\013\011" +
    "\000\002\013\015\000\002\013\005\000\002\013\005\000" +
    "\002\013\006\000\002\013\007\000\002\007\013\000\002" +
    "\010\007\000\002\011\011\000\002\012\007\000\002\014" +
    "\014\000\002\014\011\000\002\005\005\000\002\005\004" +
    "\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\026\005\015\011\022\013\023\014\025\015" +
    "\005\016\021\020\013\021\004\023\007\044\014\001\002" +
    "\000\004\022\317\001\002\000\006\016\265\044\266\001" +
    "\002\000\032\002\ufff1\005\ufff1\011\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\020\ufff1\021\ufff1\023\ufff1\037\ufff1\044" +
    "\ufff1\001\002\000\004\005\257\001\002\000\032\002\ufff8" +
    "\005\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020" +
    "\ufff8\021\ufff8\023\ufff8\037\ufff8\044\ufff8\001\002\000\030" +
    "\002\000\005\015\011\022\013\023\014\025\015\005\016" +
    "\021\020\013\021\004\023\007\044\014\001\002\000\032" +
    "\002\ufffe\005\ufffe\011\ufffe\013\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\020\ufffe\021\ufffe\023\ufffe\037\ufffe\044\ufffe\001\002" +
    "\000\004\034\224\001\002\000\006\022\210\031\207\001" +
    "\002\000\004\044\204\001\002\000\032\002\ufffc\005\ufffc" +
    "\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\021" +
    "\ufffc\023\ufffc\037\ufffc\044\ufffc\001\002\000\032\002\ufffa" +
    "\005\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\020" +
    "\ufffa\021\ufffa\023\ufffa\037\ufffa\044\ufffa\001\002\000\032" +
    "\002\ufff6\005\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\020\ufff6\021\ufff6\023\ufff6\037\ufff6\044\ufff6\001\002" +
    "\000\006\032\113\044\114\001\002\000\010\016\033\033" +
    "\032\044\034\001\002\000\004\036\075\001\002\000\032" +
    "\002\ufff4\005\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\021\ufff4\023\ufff4\037\ufff4\044\ufff4\001\002" +
    "\000\010\016\033\033\032\044\034\001\002\000\032\002" +
    "\ufff0\005\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\023\ufff0\037\ufff0\044\ufff0\001\002\000" +
    "\004\002\030\001\002\000\004\002\001\001\002\000\004" +
    "\036\062\001\002\000\006\036\uffcc\043\uffcc\001\002\000" +
    "\004\044\044\001\002\000\004\030\035\001\002\000\010" +
    "\005\037\044\040\045\036\001\002\000\006\036\uffc6\043" +
    "\uffc6\001\002\000\006\005\041\044\042\001\002\000\006" +
    "\036\uffc5\043\uffc5\001\002\000\006\036\uffc4\043\uffc4\001" +
    "\002\000\004\005\043\001\002\000\006\036\uffc3\043\uffc3" +
    "\001\002\000\004\017\045\001\002\000\004\006\046\001" +
    "\002\000\004\030\047\001\002\000\012\005\051\033\052" +
    "\044\053\045\050\001\002\000\006\036\uffca\043\uffca\001" +
    "\002\000\006\005\054\044\055\001\002\000\006\036\uffcb" +
    "\043\uffcb\001\002\000\006\036\uffc9\043\uffc9\001\002\000" +
    "\006\036\uffc8\043\uffc8\001\002\000\004\005\056\001\002" +
    "\000\004\044\057\001\002\000\004\030\060\001\002\000" +
    "\004\033\061\001\002\000\006\036\uffc7\043\uffc7\001\002" +
    "\000\026\005\015\011\022\013\023\014\025\015\005\016" +
    "\021\020\013\021\004\023\007\044\014\001\002\000\030" +
    "\005\015\011\022\013\023\014\025\015\005\016\021\020" +
    "\013\021\004\023\007\037\070\044\014\001\002\000\032" +
    "\002\ufff2\005\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\020\ufff2\021\ufff2\023\ufff2\037\ufff2\044\ufff2\001\002" +
    "\000\032\002\ufff9\005\ufff9\011\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\020\ufff9\021\ufff9\023\ufff9\037\ufff9\044\ufff9" +
    "\001\002\000\032\002\uffff\005\uffff\011\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\020\uffff\021\uffff\023\uffff\037\uffff" +
    "\044\uffff\001\002\000\032\002\ufffd\005\ufffd\011\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd\023\ufffd" +
    "\037\ufffd\044\ufffd\001\002\000\032\002\uffc1\005\uffc1\011" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1" +
    "\023\uffc1\037\uffc1\044\uffc1\001\002\000\032\002\ufffb\005" +
    "\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb" +
    "\021\ufffb\023\ufffb\037\ufffb\044\ufffb\001\002\000\032\002" +
    "\ufff7\005\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\020\ufff7\021\ufff7\023\ufff7\037\ufff7\044\ufff7\001\002\000" +
    "\032\002\ufff5\005\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\023\ufff5\037\ufff5\044\ufff5\001" +
    "\002\000\032\002\ufff3\005\ufff3\011\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\021\ufff3\023\ufff3\037\ufff3\044" +
    "\ufff3\001\002\000\026\005\015\011\022\013\023\014\025" +
    "\015\005\016\021\020\013\021\004\023\007\044\014\001" +
    "\002\000\030\005\015\011\022\013\023\014\025\015\005" +
    "\016\021\020\013\021\004\023\007\037\077\044\014\001" +
    "\002\000\004\014\100\001\002\000\010\016\033\033\032" +
    "\044\034\001\002\000\004\043\102\001\002\000\032\002" +
    "\uffc0\005\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\020\uffc0\021\uffc0\023\uffc0\037\uffc0\044\uffc0\001\002\000" +
    "\004\036\104\001\002\000\026\005\015\011\022\013\023" +
    "\014\025\015\005\016\021\020\013\021\004\023\007\044" +
    "\014\001\002\000\030\005\015\011\022\013\023\014\025" +
    "\015\005\016\021\020\013\021\004\023\007\037\106\044" +
    "\014\001\002\000\034\002\uffcd\005\uffcd\011\uffcd\012\107" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\023" +
    "\uffcd\037\uffcd\044\uffcd\001\002\000\004\036\110\001\002" +
    "\000\026\005\015\011\022\013\023\014\025\015\005\016" +
    "\021\020\013\021\004\023\007\044\014\001\002\000\030" +
    "\005\015\011\022\013\023\014\025\015\005\016\021\020" +
    "\013\021\004\023\007\037\112\044\014\001\002\000\032" +
    "\002\uffc2\005\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\020\uffc2\021\uffc2\023\uffc2\037\uffc2\044\uffc2\001\002" +
    "\000\004\044\202\001\002\000\006\017\116\045\115\001" +
    "\002\000\004\017\150\001\002\000\004\006\117\001\002" +
    "\000\012\022\123\031\120\032\122\043\121\001\002\000" +
    "\006\005\141\045\140\001\002\000\032\002\uffe5\005\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021" +
    "\uffe5\023\uffe5\037\uffe5\044\uffe5\001\002\000\004\043\137" +
    "\001\002\000\010\005\125\044\126\045\124\001\002\000" +
    "\004\043\136\001\002\000\006\005\131\044\132\001\002" +
    "\000\004\045\127\001\002\000\004\043\130\001\002\000" +
    "\032\002\uffdd\005\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\020\uffdd\021\uffdd\023\uffdd\037\uffdd\044\uffdd\001" +
    "\002\000\004\043\135\001\002\000\004\005\133\001\002" +
    "\000\004\043\134\001\002\000\032\002\uffde\005\uffde\011" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde\021\uffde" +
    "\023\uffde\037\uffde\044\uffde\001\002\000\032\002\uffe0\005" +
    "\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0" +
    "\021\uffe0\023\uffe0\037\uffe0\044\uffe0\001\002\000\032\002" +
    "\uffe3\005\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\020\uffe3\021\uffe3\023\uffe3\037\uffe3\044\uffe3\001\002\000" +
    "\032\002\uffe2\005\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\020\uffe2\021\uffe2\023\uffe2\037\uffe2\044\uffe2\001" +
    "\002\000\004\043\147\001\002\000\006\005\142\044\143" +
    "\001\002\000\004\043\146\001\002\000\004\005\144\001" +
    "\002\000\004\043\145\001\002\000\032\002\uffdf\005\uffdf" +
    "\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021" +
    "\uffdf\023\uffdf\037\uffdf\044\uffdf\001\002\000\032\002\uffe1" +
    "\005\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\021\uffe1\023\uffe1\037\uffe1\044\uffe1\001\002\000\032" +
    "\002\uffe4\005\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\020\uffe4\021\uffe4\023\uffe4\037\uffe4\044\uffe4\001\002" +
    "\000\004\006\151\001\002\000\012\022\155\031\152\032" +
    "\154\043\153\001\002\000\006\005\173\045\172\001\002" +
    "\000\032\002\uffdc\005\uffdc\011\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\020\uffdc\021\uffdc\023\uffdc\037\uffdc\044\uffdc" +
    "\001\002\000\004\043\171\001\002\000\010\005\157\044" +
    "\160\045\156\001\002\000\004\043\170\001\002\000\006" +
    "\005\163\044\164\001\002\000\004\045\161\001\002\000" +
    "\004\043\162\001\002\000\032\002\uffd4\005\uffd4\011\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\023" +
    "\uffd4\037\uffd4\044\uffd4\001\002\000\004\043\167\001\002" +
    "\000\004\005\165\001\002\000\004\043\166\001\002\000" +
    "\032\002\uffd5\005\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\020\uffd5\021\uffd5\023\uffd5\037\uffd5\044\uffd5\001" +
    "\002\000\032\002\uffd7\005\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7\037\uffd7\044" +
    "\uffd7\001\002\000\032\002\uffda\005\uffda\011\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\023\uffda\037" +
    "\uffda\044\uffda\001\002\000\032\002\uffd9\005\uffd9\011\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\023" +
    "\uffd9\037\uffd9\044\uffd9\001\002\000\004\043\201\001\002" +
    "\000\006\005\174\044\175\001\002\000\004\043\200\001" +
    "\002\000\004\005\176\001\002\000\004\043\177\001\002" +
    "\000\032\002\uffd6\005\uffd6\011\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\021\uffd6\023\uffd6\037\uffd6\044\uffd6" +
    "\001\002\000\032\002\uffd8\005\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023\uffd8\037\uffd8" +
    "\044\uffd8\001\002\000\032\002\uffdb\005\uffdb\011\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\037\uffdb\044\uffdb\001\002\000\004\043\203\001\002\000" +
    "\032\002\uffd3\005\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\020\uffd3\021\uffd3\023\uffd3\037\uffd3\044\uffd3\001" +
    "\002\000\004\005\205\001\002\000\004\023\206\001\002" +
    "\000\034\002\uffed\005\uffed\011\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\020\uffed\021\uffed\023\uffed\035\uffed\037\uffed" +
    "\044\uffed\001\002\000\004\005\216\001\002\000\006\005" +
    "\212\045\211\001\002\000\004\043\215\001\002\000\004" +
    "\005\213\001\002\000\004\043\214\001\002\000\032\002" +
    "\uffd1\005\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\037\uffd1\044\uffd1\001\002\000" +
    "\032\002\uffcf\005\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\023\uffcf\037\uffcf\044\uffcf\001" +
    "\002\000\006\005\217\044\220\001\002\000\004\043\223" +
    "\001\002\000\004\005\221\001\002\000\004\043\222\001" +
    "\002\000\032\002\uffd0\005\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\020\uffd0\021\uffd0\023\uffd0\037\uffd0\044" +
    "\uffd0\001\002\000\032\002\uffd2\005\uffd2\011\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\023\uffd2\037" +
    "\uffd2\044\uffd2\001\002\000\006\005\225\044\226\001\002" +
    "\000\004\044\247\001\002\000\010\023\230\024\227\035" +
    "\231\001\002\000\006\044\242\045\241\001\002\000\006" +
    "\044\234\045\233\001\002\000\004\043\232\001\002\000" +
    "\032\002\uffeb\005\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\020\uffeb\021\uffeb\023\uffeb\037\uffeb\044\uffeb\001" +
    "\002\000\004\035\237\001\002\000\004\035\235\001\002" +
    "\000\004\043\236\001\002\000\032\002\uffea\005\uffea\011" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea" +
    "\023\uffea\037\uffea\044\uffea\001\002\000\004\043\240\001" +
    "\002\000\032\002\uffe9\005\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\020\uffe9\021\uffe9\023\uffe9\037\uffe9\044" +
    "\uffe9\001\002\000\004\035\245\001\002\000\004\035\243" +
    "\001\002\000\004\043\244\001\002\000\032\002\uffe8\005" +
    "\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\023\uffe8\037\uffe8\044\uffe8\001\002\000\004\043" +
    "\246\001\002\000\032\002\uffe7\005\uffe7\011\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\023\uffe7\037" +
    "\uffe7\044\uffe7\001\002\000\004\005\250\001\002\000\030" +
    "\005\015\011\022\013\023\014\025\015\005\016\021\020" +
    "\013\021\004\023\007\035\251\044\014\001\002\000\004" +
    "\043\256\001\002\000\026\005\015\011\022\013\023\014" +
    "\025\015\005\016\021\020\013\021\004\023\007\044\014" +
    "\001\002\000\030\005\ufff2\011\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\020\ufff2\021\ufff2\023\ufff2\035\254\044\ufff2" +
    "\001\002\000\004\043\255\001\002\000\032\002\uffe6\005" +
    "\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6" +
    "\021\uffe6\023\uffe6\037\uffe6\044\uffe6\001\002\000\032\002" +
    "\uffec\005\uffec\011\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\020\uffec\021\uffec\023\uffec\037\uffec\044\uffec\001\002\000" +
    "\006\044\261\045\260\001\002\000\004\005\263\001\002" +
    "\000\004\005\262\001\002\000\034\002\uffef\005\uffef\011" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\023\uffef\035\uffef\037\uffef\044\uffef\001\002\000\034\002" +
    "\uffee\005\uffee\011\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\020\uffee\021\uffee\023\uffee\035\uffee\037\uffee\044\uffee\001" +
    "\002\000\004\036\314\001\002\000\004\044\303\001\002" +
    "\000\004\022\267\001\002\000\004\045\270\001\002\000" +
    "\004\043\271\001\002\000\010\016\033\033\032\044\034" +
    "\001\002\000\004\043\273\001\002\000\006\032\276\044" +
    "\275\001\002\000\004\036\uffbd\001\002\000\006\031\300" +
    "\032\301\001\002\000\004\044\277\001\002\000\004\036" +
    "\uffba\001\002\000\004\045\302\001\002\000\004\036\uffbb" +
    "\001\002\000\004\036\uffbc\001\002\000\004\017\304\001" +
    "\002\000\004\006\305\001\002\000\004\022\306\001\002" +
    "\000\004\045\307\001\002\000\004\043\310\001\002\000" +
    "\010\016\033\033\032\044\034\001\002\000\004\043\312" +
    "\001\002\000\006\032\276\044\275\001\002\000\004\036" +
    "\uffbe\001\002\000\026\005\015\011\022\013\023\014\025" +
    "\015\005\016\021\020\013\021\004\023\007\044\014\001" +
    "\002\000\030\005\015\011\022\013\023\014\025\015\005" +
    "\016\021\020\013\021\004\023\007\037\316\044\014\001" +
    "\002\000\032\002\uffbf\005\uffbf\011\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\020\uffbf\021\uffbf\023\uffbf\037\uffbf\044" +
    "\uffbf\001\002\000\004\005\320\001\002\000\004\044\321" +
    "\001\002\000\004\005\322\001\002\000\004\043\323\001" +
    "\002\000\032\002\uffce\005\uffce\011\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\020\uffce\021\uffce\023\uffce\037\uffce\044" +
    "\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\026\002\026\003\010\004\011\006\015\007" +
    "\016\010\007\011\017\012\023\015\025\016\005\001\001" +
    "\000\002\001\001\000\004\014\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\065" +
    "\006\066\007\070\010\064\011\071\012\072\015\073\016" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\062\004\011\006\015\007\016\010\007\011\017\012" +
    "\023\015\025\016\005\001\001\000\022\004\065\006\066" +
    "\007\070\010\064\011\071\012\072\015\073\016\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\075\004\011\006\015\007\016\010\007\011\017\012" +
    "\023\015\025\016\005\001\001\000\022\004\065\006\066" +
    "\007\070\010\064\011\071\012\072\015\073\016\063\001" +
    "\001\000\002\001\001\000\004\013\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\104\004\011\006\015\007\016\010\007\011\017\012\023" +
    "\015\025\016\005\001\001\000\022\004\065\006\066\007" +
    "\070\010\064\011\071\012\072\015\073\016\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\110\004" +
    "\011\006\015\007\016\010\007\011\017\012\023\015\025" +
    "\016\005\001\001\000\022\004\065\006\066\007\070\010" +
    "\064\011\071\012\072\015\073\016\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\251\004\011\006\015\007\016\010\007\011\017\012\023" +
    "\015\025\016\005\001\001\000\002\001\001\000\022\004" +
    "\065\006\066\007\070\010\064\011\071\012\072\015\073" +
    "\016\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\271\001" +
    "\001\000\002\001\001\000\004\005\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\310\001\001" +
    "\000\002\001\001\000\004\005\312\001\001\000\002\001" +
    "\001\000\024\003\314\004\011\006\015\007\016\010\007" +
    "\011\017\012\023\015\025\016\005\001\001\000\022\004" +
    "\065\006\066\007\070\010\064\011\071\012\072\015\073" +
    "\016\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_FOR ::= Declaracion Identificador Tipo T_dato Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FOR ::= For SENTENCIA_FOR Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While SENTENCIA_BOOLEANA Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= If SENTENCIA_BOOLEANA Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Declaracion Identificador Tipo T_dato Op_relacional Comillas Identificador Comillas Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Declaracion Identificador Tipo T_dato Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Declaracion Identificador Tipo T_dato Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Declaracion Identificador Tipo T_dato Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Declaracion Identificador Tipo T_dato Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If SENTENCIA_BOOLEANA Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= string Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Declaracion Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Igual Identificador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Declaracion Identificador Numero Tipo T_dato P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Declaracion Identificador Tipo T_dato Igual Identificador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Declaracion Identificador Tipo T_dato Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Declaracion Identificador Tipo T_dato Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Declaracion Identificador Tipo T_dato Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Declaracion Identificador Tipo T_dato Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Declaracion Identificador Tipo T_dato Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Declaracion Identificador Tipo T_dato Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Declaracion Identificador Tipo T_dato Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Declaracion Identificador Tipo T_dato P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMP ::= Imprimir Parentesis_a Comillas Identificador Comillas SENTENCIA CONCATENACION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMP ::= Imprimir Parentesis_a Identificador Resta Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMP ::= Imprimir Parentesis_a Identificador Resta Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IMP ::= Imprimir Parentesis_a Identificador Suma Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMP ::= Imprimir Parentesis_a Identificador Suma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IMP ::= Imprimir Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMP ::= Imprimir Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONCATENACION ::= Comillas Identificador Comillas Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONCATENACION ::= Suma Comillas Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONCATENACION ::= Suma Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IMP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IMP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

